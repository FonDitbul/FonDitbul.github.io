{"posts":[{"title":"First With Hexo","text":"Blog With Hexo !","link":"/2023/11/14/first/"},{"title":"Github Action 과 S3로 웹 페이지 자동 배포하기","text":"Github Action 과 S3의 정적 호스팅 기능을 사용하여 코드가 push 될 때마다 웹 페이지를 자동 배포할 수 있는 방법을 알아보도록 하겠습니다. AWS IAM 만들기 먼저 IAM 을 통해 Github Action에서 사용할 계정을 만들어 보도록 하겠습니다. IAM 계정 생성하기 AWS 콘솔에서 IAM검색 후 사용자 &gt; 사용자 생성 클릭 IAM S3 권한 설정하기 권한 정책에서 AmazonS3fullAccess 를 선택하여 S3에 대한 모든 권한을 부여하는 계정을 생성합니다. IAM key 발급받기 여기서 access key와 private key 를 복사해서 하단의 github 에 붙여넣기 합니다. Github 설정하기 Github Repository 에서 Setting 을 다음과 같이 설정하기 Settings 하단에 Secrets and variables &gt; Actions 를 클릭 Repository secrets 에서 New repository secret를 클릭 IAM key 에서 받아온 값들을 그림과 같이 저장합니다. S3 버킷 정적 호스팅 설정하기1. s3 bucket 만들기 aws 콘솔에서 s3 검색 버킷 만들기 클릭 2. s3 bucket setting 엑세스 차단 설정 해제하기 해당 s3 버킷은 외부에서 접근을 해야하기 때문에 위와 같이 엑세스 차단 설정을 해제 해야 합니다. 3. s3 버킷 설정하기 생성된 버킷 클릭 &gt; 속성 탭 클릭 &gt; 하단에 정적 웹 사이트 호스팅 에서 편집 버튼을 클릭 인덱스 문서에 기본 페이지 파일을 입력합니다. 보통 index.html을 사용합니다. 4. s3 정책 다음과 같이 설정하기 버킷 &gt; 권한 탭 클릭 &gt; 버킷 정책에서 편집 클릭 후 아래와 같이 작성 및 적용123456789101112{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Sid&quot;: &quot;PublicReadGetObject&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &quot;*&quot;, &quot;Action&quot;: &quot;s3:GetObject&quot;, &quot;Resource&quot;: &quot;arn:aws:s3:::github-action.test/*&quot; } ]} github-action.test 은 설정한 s3 버킷 이름을 작성하여야 합니다. Github Actions yml 생성하기 호스팅 하고자 하는 Github Repository 에서 다음과 같은 파일을 생성합니다. 파일 이름은 변경해도 상관없으나 경로는 유지해야합니다. 12345678910111213141516171819202122232425262728293031323334353637383940414243# .github/workflows/deploy.ymlname: Front Deployon: push: branches: ['main']jobs: deploy: runs-on: ubuntu-latest# defaults:# run:# working-directory: ./ steps: - name: Checkout source code uses: actions/checkout@master - name: Cache node modules # node modules 캐싱 uses: actions/cache@v1 with: path: node_modules key: ${{ runner.OS }}-master-build-${{ hashFiles('**/yarn.lock') }} restore-keys: | ${{ runner.OS }}-build- ${{ runner.OS }}- - name: Install run: npm i - name: Build env: CI: false run: npm run build - name: Deploy env: AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} run: | aws s3 cp \\ --recursive \\ --region ap-northeast-2 \\ build s3://github-action.test 상단의 on push branches 에 의해 main 브랜치에 push가 될때마다 해당 Github Action이 실행됩니다. 이후 해당 repository 에 actions 탭에서 제대로 완료되었는지 확인 끝 s3에 파일 업로드 확인 마지막 정적 웹사이트 호스팅 하단에 링크 클릭하면 제대로 출력되는지 확인!","link":"/2023/11/27/Deploy/githubaction_s3_auto_deploy/"},{"title":"prometheus + grafana with docker 구축","text":"prometheus + grafana with docker 사전 준비 docker docker-compose step 1 docker-compose.yml123456789101112131415161718192021222324252627282930313233version: '2.23.0'services: influxdb: image: bitnami/influxdb:1.8.5 container_name: influxdb ports: - &quot;8086:8086&quot; - &quot;8085:8088&quot; environment: - INFLUXDB_ADMIN_USER_PASSWORD=bitnami123 - INFLUXDB_ADMIN_USER_TOKEN=admintoken123 - INFLUXDB_HTTP_AUTH_ENABLED=false - INFLUXDB_DB=myk6db granafa: image: bitnami/grafana:latest ports: - &quot;4000:4000&quot; prometheus: image: prom/prometheus container_name: prometheus volumes: - &quot;./prometheus.yml:/prometheus/prometheus.yml&quot; ports: - &quot;9090:9090&quot; command: - '--web.enable-lifecycle' restart: always node-exporter: image: prom/node-exporter ports: - &quot;9100:9100&quot; Step 2 prometheus.yml1234567891011global: scrape_interval: 10sscrape_configs: - job_name: prometheus static_configs: - targets: - prometheus:9090 - job_name: node static_configs: - targets: - node-exporter:9100 Step docker up1sudo docker-compose up 출처: https://mxulises.medium.com/simple-prometheus-setup-on-docker-compose-f702d5f98579","link":"/2023/11/16/Infra/prometheus_grafana_docker/"}],"tags":[{"name":"github action","slug":"github-action","link":"/tags/github-action/"},{"name":"aws s3","slug":"aws-s3","link":"/tags/aws-s3/"},{"name":"모니터링","slug":"모니터링","link":"/tags/%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81/"},{"name":"grafana","slug":"grafana","link":"/tags/grafana/"},{"name":"prometheus","slug":"prometheus","link":"/tags/prometheus/"},{"name":"docker","slug":"docker","link":"/tags/docker/"}],"categories":[{"name":"Deploy","slug":"Deploy","link":"/categories/Deploy/"},{"name":"Infra","slug":"Infra","link":"/categories/Infra/"},{"name":"Front","slug":"Deploy/Front","link":"/categories/Deploy/Front/"},{"name":"Monitoring","slug":"Infra/Monitoring","link":"/categories/Infra/Monitoring/"}],"pages":[{"title":"","text":"정권기 과정을 즐기는 벡엔드 개발자 자기소개 개발 과정을 즐기며 이야기 하는 것을 좋아하는 2년차 Node 백엔드 개발자 정권기 입니다. 결과보다 과정에 있어 즐거움을 찾습니다. 문제 해결에 대한 이야기를 좋아합니다. 개발에 몰입했을 때 시간이 빨리 지나 있음에 성취감을 느낍니다. 변화에 대응이 쉽고 유지보수와 지속 가능한 애플리케이션에 대해 계속 고민합니다. 여러 개발 방법과 스터디를 통한 성장에 욕심이 있습니다. 항상 주어진 일에 책임감 있게 수행하고 더 만족도 높은 결과를 내고자 합니다. 능동적으로 일을 찾고 해결하고자 합니다. 스킬Backend Typescript, NestJs, Express Sequelize, Prisma PostgreSQL, MongoDB Jest, Sinon Frontend HTML, CSS React(기초 수준) Etc AWS Ec2, ALB, S3, RDS Docker Github Webstorm 경험사이드 프로젝트2023.04. ~copang[프로젝트 설명] 현업에서 발생할 법한 여러가지 이슈들의 해결, 개발 능력 향상을 위한 사이드 프로젝트 입니다. 이커머스 사이드 프로젝트 아키텍처, 테스트 코드, 리팩터링, 코드 관리 등에 집중하며 개발 [개발] Typescript, Nest, PostgreSQL, Prisma 스택 사용 외부 의존성 변화에 따른 개발을 최소화 하기 위한 Hexagonal 아키텍처 를 참고하여 구성 [인프라] 코드 관리 및 프로젝트 관리를 위한 모노레포 조직 git flow 브랜치 전략을 사용한 관리 [Copang Repository] 인졀미2022.03. ~ 2023.06.[프로젝트 설명] [우주두잇] 프로젝트는 아동청소년을 대상으로 한 게임형 건강관리 헬스케어 서비스이며 전국 52개 초등학교에서 3000여명의 사용자에게 서비스를 제공하는 업무를 담당하였습니다. 우주두잇 프로젝트 Backend 개발 [API 및 코드] 코드 컨벤션을 위한 eslint, prettier 를 통한 formatting 적용 Validation 코드의 관심사 분리와 불필요한 중복코드 제거를 위한 Middleware 활용 견고하며 확장성 있는 서버 코드를 위한 단위 테스트 코드 도입 및 약 2달간 테스트 케이스 234개 작성 [데이터베이스 개선] RDB 쿼리 실행 계획 및 인덱스를 활용한 성능 튜닝 작업 진행 메인 페이지 API 중 쿼리 속도 99% 개선 MongoDB 인덱스를 활용한 건강 데이터 중복 데이터 제거 속도 97% 개선 [인프라] APM Sentry On Premise 도입 기존 수동 배포 절차를 쉘 스크립트를 활용하여 자동화하여 배포시간 83% 감소 용량 부족시 수동으로 진행했던 서버 건강 데이터 s3에 자동 업로드 개선 AWS ec2, ALB를 활용한 365/24 서비스 제공 과제전형 대비 E-Commerce 마이크로 서비스 설계2023.04.17 ~ 2023.04.30[프로젝트 설명] [Numble] 에서 주관하는 [과제전형 대비 E-Commerce 마이크로 서비스 설계] 과제 E-commerce 상에서 쿠폰 기능을 도입하기 위한 가상의 환경을 통해 요구사항을 만족하는 범용적인 쿠폰(할인) 마이크로 서비스를 만드는 프로젝트 진행 Numble E-commerce 마이크로 서비스 설계 가이드라인 링크 [개발] Nest Js, Typescript, PostgreSQL, Prisma(ORM), gRPC의 기술 스택으로 개발 Redis 를 활용하여 쿠폰 동시 발급 이슈 해결 k6를 활용하여 성능 테스트 진행 지표 시각화를 위한 grafana 사용 [결과] 참가자 9명 중 TOP-1 달성 프로젝트 종료 후 Redis를 활용하여 150 RPS -&gt; 800 RPS 성능 개선 [Numble-Coupon Repository] GameLog-Server2021.08. ~ 2021.11.[프로젝트 설명] 대학교 캡스톤 디자인 으로 진행된 사용자 기반의 게임 평가, 게임 일기, 게임 추천 서비스 제공하는 앱 서비스 GameLog 개발 [개발] Javascript, express, mopngodb MVC 패턴에 따른 구현 [GameLog-Server Repository] 딥노이드2020.09 ~ 2021.02.[프로젝트 설명] 공항 X-ray를 통한 위해 물품 탐지 업무 보조 AI 위해물품 자동 탐지 어플리케이션 개발 프로젝트를 진행하였습니다. [개발] 레이블링을 편의성을 위한 내부 레이블링 사이트 유지보수 및 위해 물품 자동 탐지 어플리케이션 프론트엔드 개발 경력인졀미Node 백엔드 개발자 2022.03. ~ 2023.06. (1년 4개월) 헬스케업 플랫폼 스타트업 인졀미 회사 링크 딥노이드프론트 엔드 개발자 2020.09. ~ 2021.02. (6개월) 산업, 의료 AI 개발 관련 기업 딥노이드 회사 링크 학력광영고등학교 이과계열2012.03. ~ 2015.02. | 졸업 서울과학기술대학교대학교(학사) | 컴퓨터공학과2015.03. ~ 2022.02. | 졸업 자격증정보처리기사2021.11.","link":"/about/index.html"}]}